// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rosa/runner.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 --build_flags=--mod=mod -package mocks -destination=pkg/rosa/mocks/mock_cmd.go -source=pkg/rosa/runner.go CommandInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	rosa "github.com/openshift/rosa/pkg/rosa"
	cobra "github.com/spf13/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandInterface is a mock of CommandInterface interface.
type MockCommandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandInterfaceMockRecorder
}

// MockCommandInterfaceMockRecorder is the mock recorder for MockCommandInterface.
type MockCommandInterfaceMockRecorder struct {
	mock *MockCommandInterface
}

// NewMockCommandInterface creates a new mock instance.
func NewMockCommandInterface(ctrl *gomock.Controller) *MockCommandInterface {
	mock := &MockCommandInterface{ctrl: ctrl}
	mock.recorder = &MockCommandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandInterface) EXPECT() *MockCommandInterfaceMockRecorder {
	return m.recorder
}

// NewCommand mocks base method.
func (m *MockCommandInterface) NewCommand() *cobra.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommand")
	ret0, _ := ret[0].(*cobra.Command)
	return ret0
}

// NewCommand indicates an expected call of NewCommand.
func (mr *MockCommandInterfaceMockRecorder) NewCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommand", reflect.TypeOf((*MockCommandInterface)(nil).NewCommand))
}

// Runner mocks base method.
func (m *MockCommandInterface) Runner() rosa.CommandRunner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Runner")
	ret0, _ := ret[0].(rosa.CommandRunner)
	return ret0
}

// Runner indicates an expected call of Runner.
func (mr *MockCommandInterfaceMockRecorder) Runner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Runner", reflect.TypeOf((*MockCommandInterface)(nil).Runner))
}
