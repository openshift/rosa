// Code generated by MockGen. DO NOT EDIT.
// Source: machinepool.go
//
// Generated by this command:
//
//	mockgen -source=machinepool.go -package=machinepool -destination=machinepool_mock.go
//
// Package machinepool is a generated GoMock package.
package machinepool

import (
	reflect "reflect"

	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	rosa "github.com/openshift/rosa/pkg/rosa"
	cobra "github.com/spf13/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockMachinePoolService is a mock of MachinePoolService interface.
type MockMachinePoolService struct {
	ctrl     *gomock.Controller
	recorder *MockMachinePoolServiceMockRecorder
}

// MockMachinePoolServiceMockRecorder is the mock recorder for MockMachinePoolService.
type MockMachinePoolServiceMockRecorder struct {
	mock *MockMachinePoolService
}

// NewMockMachinePoolService creates a new mock instance.
func NewMockMachinePoolService(ctrl *gomock.Controller) *MockMachinePoolService {
	mock := &MockMachinePoolService{ctrl: ctrl}
	mock.recorder = &MockMachinePoolServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachinePoolService) EXPECT() *MockMachinePoolServiceMockRecorder {
	return m.recorder
}

// AddMachinePool mocks base method.
func (m *MockMachinePoolService) AddMachinePool(cmd *cobra.Command, clusterKey string, cluster *v1.Cluster, r *rosa.Runtime, args *MachinePoolArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachinePool", cmd, clusterKey, cluster, r, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMachinePool indicates an expected call of AddMachinePool.
func (mr *MockMachinePoolServiceMockRecorder) AddMachinePool(cmd, clusterKey, cluster, r, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachinePool", reflect.TypeOf((*MockMachinePoolService)(nil).AddMachinePool), cmd, clusterKey, cluster, r, args)
}

// AddNodePool mocks base method.
func (m *MockMachinePoolService) AddNodePool(cmd *cobra.Command, clusterKey string, cluster *v1.Cluster, r *rosa.Runtime, args *MachinePoolArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodePool", cmd, clusterKey, cluster, r, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNodePool indicates an expected call of AddNodePool.
func (mr *MockMachinePoolServiceMockRecorder) AddNodePool(cmd, clusterKey, cluster, r, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodePool", reflect.TypeOf((*MockMachinePoolService)(nil).AddNodePool), cmd, clusterKey, cluster, r, args)
}

// DeleteMachinePool mocks base method.
func (m *MockMachinePoolService) DeleteMachinePool(r *rosa.Runtime, machinePoolId, clusterKey string, cluster *v1.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachinePool", r, machinePoolId, clusterKey, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachinePool indicates an expected call of DeleteMachinePool.
func (mr *MockMachinePoolServiceMockRecorder) DeleteMachinePool(r, machinePoolId, clusterKey, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachinePool", reflect.TypeOf((*MockMachinePoolService)(nil).DeleteMachinePool), r, machinePoolId, clusterKey, cluster)
}

// DescribeMachinePool mocks base method.
func (m *MockMachinePoolService) DescribeMachinePool(r *rosa.Runtime, cluster *v1.Cluster, clusterKey, machinePoolId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMachinePool", r, cluster, clusterKey, machinePoolId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeMachinePool indicates an expected call of DescribeMachinePool.
func (mr *MockMachinePoolServiceMockRecorder) DescribeMachinePool(r, cluster, clusterKey, machinePoolId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMachinePool", reflect.TypeOf((*MockMachinePoolService)(nil).DescribeMachinePool), r, cluster, clusterKey, machinePoolId)
}

// ListMachinePools mocks base method.
func (m *MockMachinePoolService) ListMachinePools(r *rosa.Runtime, clusterKey string, cluster *v1.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachinePools", r, clusterKey, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMachinePools indicates an expected call of ListMachinePools.
func (mr *MockMachinePoolServiceMockRecorder) ListMachinePools(r, clusterKey, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachinePools", reflect.TypeOf((*MockMachinePoolService)(nil).ListMachinePools), r, clusterKey, cluster)
}
